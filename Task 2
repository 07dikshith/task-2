from datetime import datetime, timedelta

class LibraryItem:
    def __init__(self, title, author, category):
        self.title = title
        self.author = author
        self.category = category
        self.available = True
        self.due_date = None

    def check_out(self, days=14):
        if self.available:
            self.available = False
            self.due_date = datetime.now() + timedelta(days=days)
            print(f"{self.title} checked out. Due back on {self.due_date.strftime('%Y-%m-%d')}")
        else:
            print(f"{self.title} is currently not available.")

    def return_item(self):
        if not self.available:
            self.available = True
            self.due_date = None
            print(f"{self.title} returned.")
        else:
            print(f"{self.title} was not checked out.")

    def is_overdue(self):
        if not self.available and self.due_date < datetime.now():
            return True
        return False

class Book(LibraryItem):
    def __init__(self, title, author, genre):
        super().__init__(title, author, "Book")
        self.genre = genre

class Magazine(LibraryItem):
    def __init__(self, title, author, issue):
        super().__init__(title, author, "Magazine")
        self.issue = issue

class DVD(LibraryItem):
    def __init__(self, title, director, runtime):
        super().__init__(title, director, "DVD")
        self.runtime = runtime

class Library:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)
        print(f"{item.title} added to the library.")

    def search_items(self, title=None, author=None, category=None):
        results = []
        for item in self.items:
            if ((title is None or title.lower() in item.title.lower()) and
                (author is None or author.lower() in item.author.lower()) and
                (category is None or category.lower() == item.category.lower())):
                results.append(item)
        return results

    def check_out_item(self, title):
        for item in self.items:
            if item.title.lower() == title.lower() and item.available:
                item.check_out()
                return
        print(f"{title} is not available for checkout.")

    def return_item(self, title):
        for item in self.items:
            if item.title.lower() == title.lower() and not item.available:
                item.return_item()
                return
        print(f"{title} was not checked out or does not exist.")

    def list_overdue_items(self):
        overdue_items = [item for item in self.items if item.is_overdue()]
        if overdue_items:
            print("Overdue items:")
            for item in overdue_items:
                print(f"Title: {item.title}, Due Date: {item.due_date.strftime('%Y-%m-%d')}")
        else:
            print("No overdue items.")


library = Library()


library.add_item(Book("The Great Gatsby", "F. Scott Fitzgerald", "Fiction"))
library.add_item(Magazine("National Geographic", "Various", "January 2024"))
library.add_item(DVD("Inception", "Christopher Nolan", "148 minutes"))

print("\nSearch Results:")
search_results = library.search_items(title="great")
for item in search_results:
    print(f"Title: {item.title}, Author: {item.author}, Category: {item.category}")


library.check_out_item("The Great Gatsby")
library.check_out_item("Inception")


print("\nOverdue Items:")
library.list_overdue_items()


library.return_item("The Great Gatsby")
library.return_item("Inception")
